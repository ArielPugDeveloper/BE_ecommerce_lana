// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  color       String   @db.VarChar(255)
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  stock       Int
  image_url   String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  OrderProduct OrderProduct[]
  CartProduct  CartProduct[]

  @@map("product")
}

// prisma/schema.prisma

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  celular   String   @unique
  name      String
  password  String
  role      String   @default("REGULAR_USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]
  cart     Cart?

  @@map("user")
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    String      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  products  CartProduct[]

  @@map("cart")
}

model CartProduct {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  addedAt   DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cartproduct")
}


model Order {
  id        Int      @id @default(autoincrement())
  userId    String   // Â¡Cambiar de Int a String!
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  products  OrderProduct[]

  @@map("order")
}


model OrderProduct {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Float
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])

  @@map("orderproduct")
}
